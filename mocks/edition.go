// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	colly "github.com/gocolly/colly/v2"
	crawler "github.com/hostfactor/minecrafter/crawler"
	docker "github.com/hostfactor/minecrafter/docker"

	mock "github.com/stretchr/testify/mock"
)

// Edition is an autogenerated mock type for the Edition type
type Edition struct {
	mock.Mock
}

// BuildArgs provides a mock function with given fields: release, v
func (_m *Edition) BuildArgs(release *crawler.Release, v docker.TagVariation) map[string]string {
	ret := _m.Called(release, v)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(*crawler.Release, docker.TagVariation) map[string]string); ok {
		r0 = rf(release, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetTagVariations provides a mock function with given fields:
func (_m *Edition) GetTagVariations() []docker.TagVariation {
	ret := _m.Called()

	var r0 []docker.TagVariation
	if rf, ok := ret.Get(0).(func() []docker.TagVariation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]docker.TagVariation)
		}
	}

	return r0
}

// GetURL provides a mock function with given fields:
func (_m *Edition) GetVersionListURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseRelease provides a mock function with given fields: e
func (_m *Edition) ParseRelease(e *colly.HTMLElement) *crawler.Release {
	ret := _m.Called(e)

	var r0 *crawler.Release
	if rf, ok := ret.Get(0).(func(*colly.HTMLElement) *crawler.Release); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crawler.Release)
		}
	}

	return r0
}
